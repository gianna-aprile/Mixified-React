{"version":3,"sources":["hash.js","config.js","PlaylistOptions.js","App.js","serviceWorker.js","index.js","images/mixifiedLogo.png"],"names":["hash","window","location","substring","split","reduce","initial","item","parts","decodeURIComponent","scopes","PlaylistOptions","props","state","loading","playlistType","this","setState","url","URL","search","URLSearchParams","token","fetch","then","res","json","data","confirmAlert","title","message","buttons","label","className","src","logo","alt","onClick","handleButtonClick","React","Component","App","tok","access_token","href","join","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","module","exports"],"mappings":"qRAAMA,G,MAAOC,OAAOC,SAASF,KAC1BG,UAAU,GACVC,MAAM,KACNC,QAAO,SAASC,EAASC,GACxB,GAAIA,EAAM,CACR,IAAIC,EAAQD,EAAKH,MAAM,KACvBE,EAAQE,EAAM,IAAMC,mBAAmBD,EAAM,IAE/C,OAAOF,IACN,KACLL,OAAOC,SAASF,KAAO,GAERA,QCPFU,EAAS,CACpB,yBACA,0BACA,oBACA,iB,eC+SiBC,G,wDA/SjB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAQ,GAHO,E,8DAODC,GAAc,IAAD,OAC3BC,KAAKC,SAAS,CAACH,SAAS,IACxB,IAAII,EAAM,IAAIC,IAAJ,UDCM,wBCDN,gBAAyBJ,IACnCG,EAAIE,OAAS,IAAIC,gBAAgB,CAAEC,MAAON,KAAKJ,MAAMU,QACrDC,MAAML,GACLM,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACY,YAAdA,EAAKA,KACNC,uBAAa,CACXC,MAAO,gCACPC,QAAS,8HACTC,QAAS,CAAC,CAACC,MAAO,SAGC,kBAAdL,EAAKA,KACZC,uBAAa,CACXC,MAAO,0BACPC,QAAS,2FACTC,QAAS,CAAC,CAACC,MAAO,SAGC,mBAAdL,EAAKA,KACZC,uBAAa,CACXC,MAAO,0BACPC,QAAS,sEACTC,QAAS,CAAC,CAACC,MAAO,SAIpBJ,uBAAa,CACXC,MAAO,kBACPC,QAAS,uKACTC,QAAS,CAAC,CAACC,MAAO,SAGtB,EAAKf,SAAS,CAACH,SAAS,S,+BAInB,IAAD,OACR,OACE,8BACA,yBAAKmB,UAAU,OACT,yBAAKA,UAAU,cACb,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wBAAIH,UAAU,aAAd,aAEF,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,eACE,uBAAGA,UAAU,WACX,oLAKAjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UACpBI,QAAW,kBAAM,EAAKC,kBAAkB,uBACtC,oDAGDtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMJ,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,kBACE,uBAAGA,UAAU,WACX,qLAKAjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,0BACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMJ,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,cACE,uBAAGA,UAAU,WACX,kKAKAjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,sBACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAKJ,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,OACA,uBAAGA,UAAU,WACX,kKAIAjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,SACtC,oDAGLtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMF,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,WACA,uBAAGA,UAAU,WACT,8KAIFjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,YACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMF,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,OACA,uBAAGA,UAAU,WACT,kKAIFjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,SACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMF,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,aACA,uBAAGA,UAAU,WACT,oLAIFjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,SACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMF,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,OACA,uBAAGA,UAAU,WACT,kKAIFjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,SACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMF,yBAAKA,UAAU,aACf,wBAAIA,UAAU,aAAd,SACA,uBAAGA,UAAU,WACT,wKAIFjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,WACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMF,yBAAKA,UAAU,cACf,wBAAIA,UAAU,aAAd,WACA,uBAAGA,UAAU,WACT,8KAIFjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,aACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMF,yBAAKA,UAAU,cACf,wBAAIA,UAAU,aAAd,eACA,uBAAGA,UAAU,WACT,mLAIFjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,iBACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,eAMF,yBAAKA,UAAU,cACf,wBAAIA,UAAU,aAAd,QACA,uBAAGA,UAAU,WACT,qKAIFjB,KAAKH,MAAMC,SACX,4BAAQmB,UAAU,UAChBI,QAAW,kBAAM,EAAKC,kBAAkB,UACxC,oDAGHtB,KAAKH,MAAMC,SACV,4BAAQmB,UAAU,WAAlB,sB,GArSgBM,IAAMC,YC6CrBC,E,kDA5Cb,aAAe,IAAD,8BACZ,gBACK5B,MAAQ,CACXS,MAAO,MAHG,E,gEAQZ,IAAIoB,EAAM1C,EAAK2C,aACXD,GACF1B,KAAKC,SAAS,CACZK,MAAOoB,M,+BAMX,OACE,yBAAKT,UAAU,aACTjB,KAAKH,MAAMS,OACX,oCACA,yBAAKY,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,wBAAIH,UAAU,aAAd,YACA,uBAAGA,UAAU,kBAAiB,kEAC9B,uBAAGA,UAAU,eAAb,+NAEA,uBACIA,UAAU,kBACVW,KAAI,UFlCQ,0CEkCR,qBFjCI,mCEiCJ,yBFtBO,wBEsBP,kBAA4ElC,EAAOmC,KAAK,OAAxF,0CAFR,oBAKA,uBAAGZ,UAAU,iBAAb,YAAsC,uBAAGW,KAAK,mCAAR,mBAGvC5B,KAAKH,MAAMS,OACV,kBAAC,EAAD,CACEA,MAAON,KAAKH,MAAMS,a,GArCdiB,IAAMC,WCKJM,QACW,cAA7B7C,OAAOC,SAAS6C,UAEe,UAA7B9C,OAAOC,SAAS6C,UAEhB9C,OAAOC,SAAS6C,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM9B,a,kBEzI5BgC,EAAOC,QAAU,IAA0B,0C","file":"static/js/main.5e438d8d.chunk.js","sourcesContent":["const hash = window.location.hash\n  .substring(1)\n  .split(\"&\")\n  .reduce(function(initial, item) {\n    if (item) {\n      var parts = item.split(\"=\");\n      initial[parts[0]] = decodeURIComponent(parts[1]);\n    }\n    return initial;\n  }, {});\nwindow.location.hash = \"\";\n\nexport default hash;","\n// ***** SPOTIFY CONFIG *****\nexport const authEndpoint = 'https://accounts.spotify.com/authorize?';\nexport const clientId = \"5b6937ee59594376822e556cd3db243b\";\n\nexport const scopes = [\n  \"playlist-modify-public\",\n  \"playlist-modify-private\",\n  \"user-library-read\",\n  \"user-top-read\",\n];\n\n// ***** REACT CONFIG *****\n//export const redirectUri = \"https://gianna-aprile.github.io/Mixified-React/\"; // -> To use deployed version of React app\nexport const redirectUri = \"http://localhost:3000\"; // -> To use local version of React app\n\n\n// ***** FLASK APP (API) CONFIG *****\n//export const apiURL = \"https://mixified-api.herokuapp.com\" // To use deployed version of API\nexport const apiURL = \"http://127.0.0.1:5000\" // To use local version of API\n\n","import React from \"react\";\nimport 'react-confirm-alert/src/react-confirm-alert.css';\nimport { confirmAlert } from 'react-confirm-alert';\nimport logo from './images/mixifiedLogo.png';\nimport './styles/PlaylistOptions.css';\nimport { apiURL } from \"./config\";\n\nclass PlaylistOptions extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading:false\n    };\n  }\n  \n  handleButtonClick(playlistType){\n      this.setState({loading: true})\n      let url = new URL(`${apiURL}/api/${playlistType}`)\n      url.search = new URLSearchParams({ token: this.props.token })\n      fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        if(data.data === 'success'){\n          confirmAlert({\n            title: 'Playlist Created Successfully',\n            message: 'New playlist created successfully, it will appear in your Spotify library shortly! (Or relaunch Spotify for instant access)',\n            buttons: [{label: 'OK'}]\n          });\n        }\n        else if (data.data === 'rate exceeded'){\n          confirmAlert({\n            title: 'API Rate Limit Exceeded',\n            message: 'Sorry! Spotify needs a little break from making playlists, please try again in a minute.',\n            buttons: [{label: 'OK'}]\n          });\n        }\n        else if (data.data === 'creation error'){\n          confirmAlert({\n            title: 'Error Creating Playlist',\n            message: 'Sorry! There was an error creating your playlist, please try again.',\n            buttons: [{label: 'OK'}]\n          });\n        }\n        else{\n          confirmAlert({\n            title: 'No Tracks Found',\n            message: 'No tracks were found in your library that match this type of playlist, please save more tracks to your liked songs on your Spotify account for personalized results.',\n            buttons: [{label: 'OK'}]\n          });\n        }\n        this.setState({loading: false}) \n      })     \n  }\n\n    render(){\n    return (\n      <body>\n      <div className=\"PLO\">\n            <div className=\"PLO-header\">\n              <img src={logo} className=\"PLO-logo\" alt=\"Logo\"/>\n              <h1 className=\"PLO-title\">Mixified</h1>\n            </div>\n            <div className=\"PLO-container\">\n            <div className=\"PLO-box 1\"> \n            <h2 className=\"box-title\">Top Artists</h2>\n              <p className=\"PLO-des\">\n                <em>\n                    Discover more artists related to artists you already love. \n                    This playlist will contain songs that are related to the tracks of your top 50 artists.\n                </em>\n              </p>\n              {!this.state.loading && (\n                <button className=\"PLO-btn\"\n              onClick = {() => this.handleButtonClick(\"topRelatedArtists\")}>\n                <b>Generate My Playlist</b>\n              </button>\n              )}\n              {this.state.loading && (\n                <button className=\"PLO-btn\">\n              Loading...\n              </button>\n              )}\n            </div>\n\n            <div className=\"PLO-box 2\"> \n            <h2 className=\"box-title\">Recent Artists</h2>\n              <p className=\"PLO-des\">\n                <em>\n                    Find more artists related to your newest saved songs. This playlist will contain artists\n                    related to the artists of your most recently saved tracks.\n                </em>\n              </p>\n              {!this.state.loading && (\n                <button className=\"PLO-btn\"\n                  onClick = {() => this.handleButtonClick(\"recentRelatedArtists\")}>\n                  <b>Generate My Playlist</b>\n                </button>\n              )}\n              {this.state.loading && (\n                <button className=\"PLO-btn\">\n                Loading...\n                </button>\n              )}\n            </div>\n\n            <div className=\"PLO-box 3\"> \n            <h2 className=\"box-title\">Top Tracks</h2>\n              <p className=\"PLO-des\">\n                <em>\n                    Discover more songs related to your favorite tracks. This playlist will contain songs\n                    related to your top 50 most played tracks.\n                </em>\n              </p>\n              {!this.state.loading && (\n                <button className=\"PLO-btn\"\n                  onClick = {() => this.handleButtonClick(\"topRelatedTracks\")}>\n                  <b>Generate My Playlist</b>\n                </button>\n              )}\n              {this.state.loading && (\n                <button className=\"PLO-btn\">\n                Loading...\n                </button>\n              )}\n            </div>\n            <div className=\"PLO-box 4\"> \n            <h2 className=\"box-title\">Pop</h2>\n            <p className=\"PLO-des\">\n              <em>\n              Explore the pop genre. This playlist will contain pop songs that are similar to the most recent pop songs saved in your library.\n              </em>\n            </p>\n            {!this.state.loading && (\n              <button className=\"PLO-btn\"\n                onClick = {() => this.handleButtonClick(\"pop\")}>\n                  <b>Generate My Playlist</b>\n              </button>\n            )}\n            {this.state.loading && (\n              <button className=\"PLO-btn\">\n              Loading...\n              </button>\n            )}\n            </div>\n\n            <div className=\"PLO-box 5\"> \n            <h2 className=\"box-title\">Hip Hop</h2>\n            <p className=\"PLO-des\">\n                <em>\n                Explore the hip hop genre. This playlist will contain hip hop songs that are similar to the most recent hip hop songs saved in your library.\n                </em>\n            </p>\n            {!this.state.loading && (\n              <button className=\"PLO-btn\"\n                onClick = {() => this.handleButtonClick(\"hiphop\")}>\n                <b>Generate My Playlist</b>\n              </button>\n            )}\n            {this.state.loading && (\n              <button className=\"PLO-btn\">\n              Loading...\n              </button>\n            )}\n            </div>\n\n            <div className=\"PLO-box 6\"> \n            <h2 className=\"box-title\">Rap</h2>\n            <p className=\"PLO-des\">\n                <em>\n                Explore the rap genre. This playlist will contain rap songs that are similar to the most recent rap songs saved in your library.\n                </em>\n            </p>\n            {!this.state.loading && (\n              <button className=\"PLO-btn\"\n                onClick = {() => this.handleButtonClick(\"rap\")}>\n                <b>Generate My Playlist</b>\n              </button>\n            )}\n            {this.state.loading && (\n              <button className=\"PLO-btn\">\n              Loading...\n              </button>\n            )}\n            </div>\n\n            <div className=\"PLO-box 7\"> \n            <h2 className=\"box-title\">R{`&`}B</h2>\n            <p className=\"PLO-des\">\n                <em>\n                Explore the R{`&`}B genre. This playlist will contain R{`&`}B songs that are similar to the most recent R{`&`}B songs saved in your library.\n                </em>\n            </p>\n            {!this.state.loading && (\n              <button className=\"PLO-btn\"\n                onClick = {() => this.handleButtonClick(\"r&b\")}>\n                <b>Generate My Playlist</b>\n              </button>\n            )}\n            {this.state.loading && (\n              <button className=\"PLO-btn\">\n              Loading...\n              </button>\n            )}\n            </div>\n\n            <div className=\"PLO-box 8\"> \n            <h2 className=\"box-title\">EDM</h2>\n            <p className=\"PLO-des\">\n                <em>\n                Explore the EDM genre. This playlist will contain EDM songs that are similar to the most recent EDM songs saved in your library.\n                </em>\n            </p>\n            {!this.state.loading && (\n              <button className=\"PLO-btn\"\n                onClick = {() => this.handleButtonClick(\"edm\")}>\n                <b>Generate My Playlist</b>\n              </button>\n            )}\n            {this.state.loading && (\n              <button className=\"PLO-btn\">\n              Loading...\n              </button>\n            )}\n            </div>\n\n            <div className=\"PLO-box 9\"> \n            <h2 className=\"box-title\">House</h2>\n            <p className=\"PLO-des\">\n                <em>\n                Explore the house genre. This playlist will contain house songs that are similar to the most recent house songs saved in your library.\n                </em>\n            </p>\n            {!this.state.loading && (\n              <button className=\"PLO-btn\"\n                onClick = {() => this.handleButtonClick(\"house\")}>\n                <b>Generate My Playlist</b>\n              </button>\n            )}\n            {this.state.loading && (\n              <button className=\"PLO-btn\">\n              Loading...\n              </button>\n            )}\n            </div>\n\n            <div className=\"PLO-box 10\"> \n            <h2 className=\"box-title\">Country</h2>\n            <p className=\"PLO-des\">\n                <em>\n                Explore the country genre. This playlist will contain country songs that are similar to the most recent country songs saved in your library.\n                </em>\n            </p>\n            {!this.state.loading && (\n              <button className=\"PLO-btn\"\n                onClick = {() => this.handleButtonClick(\"country\")}>\n                <b>Generate My Playlist</b>\n              </button>\n            )}\n            {this.state.loading && (\n              <button className=\"PLO-btn\">\n              Loading...\n              </button>\n            )}  \n            </div>\n\n            <div className=\"PLO-box 11\"> \n            <h2 className=\"box-title\">Alternative</h2>\n            <p className=\"PLO-des\">\n                <em>\n                Explore the alternative genre. This playlist will contain alternative songs that are similar to the most recent alt. songs saved in your library.\n                </em>\n            </p>\n            {!this.state.loading && (\n              <button className=\"PLO-btn\"\n                onClick = {() => this.handleButtonClick(\"alternative\")}>\n                <b>Generate My Playlist</b>\n              </button>\n            )}\n            {this.state.loading && (\n              <button className=\"PLO-btn\">\n              Loading...\n              </button>\n            )}\n            </div>\n\n            <div className=\"PLO-box 12\"> \n            <h2 className=\"box-title\">Rock</h2>\n            <p className=\"PLO-des\">\n                <em>\n                Explore the rock genre. This playlist will contain rock songs that are similar to the most recent rock songs saved in your library.\n                </em>\n            </p>\n            {!this.state.loading && (\n              <button className=\"PLO-btn\"\n                onClick = {() => this.handleButtonClick(\"rock\")}>\n                <b>Generate My Playlist</b>\n              </button>\n            )}\n            {this.state.loading && (\n              <button className=\"PLO-btn\">\n              Loading...\n              </button>\n            )}\n            </div>\n          </div>\n      </div>\n      </body>\n    );\n  }\n}\n    \n    export default PlaylistOptions;","import React from 'react';\nimport logo from './images/mixifiedLogo.png';\nimport './styles/App.css';\nimport hash from \"./hash\";\nimport { authEndpoint, clientId, redirectUri, scopes } from \"./config\";\nimport PlaylistOptions from \"./PlaylistOptions\";\n\nclass App extends React.Component{\n  constructor() {\n    super();\n    this.state = {\n      token: null,\n    }\n  }\n  \n  componentDidMount() {\n    let tok = hash.access_token;\n    if (tok) {\n      this.setState({\n        token: tok\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App-main\">\n          {!this.state.token && (\n            <>\n            <img src={logo} className=\"App-logo\" alt=\"Logo\"/>\n            <h1 className=\"App-title\">Mixified</h1>\n            <p className=\"App-subheading\"><i>A Smart Spotify Playlist Generator</i></p>\n            <p className=\"App-explain\">Mixified generates personalized playlists based on your Spotify saved tracks, top artists, and top songs.\n            The creation process of these playlists has randomizing features to ensure you never get the same playlist twice.</p>\n            <a\n                className=\"App-loginButton\"\n                href={`${authEndpoint}client_id=${clientId}&redirect_uri=${redirectUri}&scope=${scopes.join(\"%20\")}&response_type=token&show_dialog=true`}>\n                Login To Spotify\n            </a>\n            <p className=\"App-createdBy\">Contact: <a href=\"mailto:giannaaprile@outlook.com\">Gianna Aprile</a></p>\n            </>\n          )} \n          {this.state.token && (\n            <PlaylistOptions \n              token={this.state.token}\n             />\n          )}         \n      </div>\n    );\n  }\n}  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/mixifiedLogo.86ac2f4a.png\";"],"sourceRoot":""}